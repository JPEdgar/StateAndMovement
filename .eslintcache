[{"C:\\Users\\Jon.Edgar\\Desktop\\StateAndMovement\\src\\index.js":"1","C:\\Users\\Jon.Edgar\\Desktop\\StateAndMovement\\src\\App.jsx":"2","C:\\Users\\Jon.Edgar\\Desktop\\StateAndMovement\\src\\component\\Board.jsx":"3","C:\\Users\\Jon.Edgar\\Desktop\\StateAndMovement\\src\\component\\Actor.jsx":"4","C:\\Users\\Jon.Edgar\\Desktop\\StateAndMovement\\src\\component\\KeyPress.jsx":"5"},{"size":198,"mtime":1611878318316,"results":"6","hashOfConfig":"7"},{"size":554,"mtime":1611967582519,"results":"8","hashOfConfig":"7"},{"size":437,"mtime":1611967121355,"results":"9","hashOfConfig":"7"},{"size":265,"mtime":1611881148364,"results":"10","hashOfConfig":"7"},{"size":1000,"mtime":1611966969807,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1ifuihz",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"C:\\Users\\Jon.Edgar\\Desktop\\StateAndMovement\\src\\index.js",[],["24","25"],"C:\\Users\\Jon.Edgar\\Desktop\\StateAndMovement\\src\\App.jsx",["26"],"C:\\Users\\Jon.Edgar\\Desktop\\StateAndMovement\\src\\component\\Board.jsx",[],"C:\\Users\\Jon.Edgar\\Desktop\\StateAndMovement\\src\\component\\Actor.jsx",[],"C:\\Users\\Jon.Edgar\\Desktop\\StateAndMovement\\src\\component\\KeyPress.jsx",["27","28"],"import React, { useState, useEffect } from \"react\";\r\n\r\n// Hook\r\nexport default function useKeyPress(targetKey) {\r\n  // State for keeping track of whether key is pressed\r\n  const [keyPressed, setKeyPressed] = useState(false);\r\n\r\n  // If pressed key is our target key then set to true\r\n  function downHandler({ key }) {\r\n    if (key === targetKey) {\r\n      setKeyPressed(true);\r\n    }\r\n  }\r\n\r\n  // If released key is our target key then set to false\r\n  const upHandler = ({ key }) => {\r\n    if (key === targetKey) {\r\n      setKeyPressed(false);\r\n    }\r\n  };\r\n\r\n  // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", downHandler);\r\n    window.addEventListener(\"keyup\", upHandler);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", downHandler);\r\n      window.removeEventListener(\"keyup\", upHandler);\r\n    };\r\n  }, []); // Empty array ensures that effect is only run on mount and unmount\r\n\r\n  return keyPressed;\r\n}\r\n",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":3,"column":8,"nodeType":"35","messageId":"36","endLine":3,"endColumn":13},{"ruleId":"33","severity":1,"message":"37","line":1,"column":8,"nodeType":"35","messageId":"36","endLine":1,"endColumn":13},{"ruleId":"38","severity":1,"message":"39","line":31,"column":6,"nodeType":"40","endLine":31,"endColumn":8,"suggestions":"41"},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"no-unused-vars","'Board' is defined but never used.","Identifier","unusedVar","'React' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'downHandler' and 'upHandler'. Either include them or remove the dependency array.","ArrayExpression",["44"],"no-global-assign","no-unsafe-negation",{"desc":"45","fix":"46"},"Update the dependencies array to be: [downHandler, upHandler]",{"range":"47","text":"48"},[899,901],"[downHandler, upHandler]"]